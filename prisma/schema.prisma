// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id         String  @id @default(uuid())
  name       String  
  userId     String
  billboards Billboards[] @relation("StoreBillboards")
  categories Category[] @relation("StoreCategories")
  sizes      Size[] @relation("StoreSizes")
  colors     Color[] @relation("StoreColors")
  products   Product[] @relation("StoreProducts")
  orders     Order[] @relation("StoreOrders")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Billboards {
  id         String  @id @default(uuid())
  storeId    String
  store      Store   @relation("StoreBillboards", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[] @relation("BillboardCategories")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id         String  @id @default(uuid())
  storeId    String
  store      Store   @relation("StoreCategories", fields: [storeId], references: [id])
  name       String  @default("")
  billboardId String
  billboard  Billboards @relation("BillboardCategories", fields: [billboardId], references: [id])
  products   Product[] @relation("ProductCategory")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id         String  @id @default(uuid())
  storeId    String
  store      Store   @relation("StoreSizes", fields: [storeId], references: [id])
  name       String
  value      String
  products   Product[] @relation("ProductSize")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([storeId])
}

model Color {
  id         String  @id @default(uuid())
  storeId    String
  store      Store   @relation("StoreColors", fields: [storeId], references: [id])
  name       String
  value      String
  products   Product[] @relation("ProductColor")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([storeId])
}

model Product {
  id         String  @id @default(uuid())
  storeId    String
  store      Store   @relation("StoreProducts", fields: [storeId], references: [id])
  categoryId String
  category   Category @relation("ProductCategory", fields: [categoryId], references: [id])
  name       String
  price      Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId     String
  size       Size     @relation("ProductSize", fields: [sizeId], references: [id])
  colorId    String
  color      Color    @relation("ProductColor", fields: [colorId], references: [id])
  images     Image[] @relation("ProductImage")
  orderItems OrderItem[] @relation("OrderProduct")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id         String  @id @default(uuid())
  productId  String
  product    Product @relation("ProductImage", fields: [productId], references: [id], onDelete: Cascade)
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String  @id @default(uuid())
  storeId    String
  store      Store   @relation("StoreOrders", fields: [storeId], references: [id])
  orderItems OrderItem[] @relation("OrderOrderItems")
  isPaid     Boolean @default(false)
  phone      String
  address    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([storeId])
}

model OrderItem {
  id         String  @id @default(uuid())
  orderId    String
  order      Order   @relation("OrderOrderItems", fields: [orderId], references: [id])
  productId  String
  product    Product @relation("OrderProduct", fields: [productId], references: [id])
 
  @@index([orderId])
  @@index([productId])
}